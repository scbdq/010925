
#!/usr/bin/env python3
import argparse
import base64
import sys

SECOND_XOR_DEFAULT = 0xAA

def make_obf(flag_bytes: bytes, key: int = 0x5A, second_xor: int = SECOND_XOR_DEFAULT):
    xored = bytes([b ^ key for b in flag_bytes])
    first = base64.b64encode(xored)
    second = base64.b64encode(first)
    final = bytes([b ^ second_xor for b in second])
    return final

def to_c_array(b: bytes, name="obf_data"):
    nums = [str(x) for x in b]
    lines = []
    for i in range(0, len(nums), 16):
        lines.append("    " + ", ".join(nums[i:i+16]))
    arr = "static unsigned char {}[] = {{\n{}\n}};\n".format(name, ",\n".join(lines))
    arr += "static const size_t obf_len = {};\n".format(len(b))
    return arr

def generate_c_snippet(obf_bytes: bytes, c_name="obf_data", xor_key=SECOND_XOR_DEFAULT):
    header = "// Generated by obf generator\n"
    header += "static const unsigned char XOR_KEY = 0x{:02X};\n\n".format(xor_key)
    header += to_c_array(obf_bytes, name=c_name)
    return header

def main():
    parser = argparse.ArgumentParser(
        description="Generate obf_data = XOR2( base64(base64(XOR(flag))) )"
    )
    parser.add_argument("--flag", "-f", help="Flag string (default: example)",
                        default="vsosh{l_l0v3_g4m3s}")
    parser.add_argument("--key", "-k", type=lambda x: int(x,0), default=0x5A,
                        help="First XOR key (default 0x5A)")
    parser.add_argument("--second", "-s", type=lambda x: int(x,0), default=SECOND_XOR_DEFAULT,
                        help="Second XOR key applied to double-base64 (default 0xAA)")
    parser.add_argument("--name", help="C array name (default: obf_data)", default="obf_data")
    args = parser.parse_args()

    flag = args.flag.encode()
    obf = make_obf(flag, key=args.key, second_xor=args.second)

    print(generate_c_snippet(obf, c_name=args.name, xor_key=args.second))

if __name__ == "__main__":
    main()
